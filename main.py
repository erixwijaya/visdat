# -*- coding: utf-8 -*-
"""TubesVisdat.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WSQN0AM4gOnyTozLN7qH5YCWhvr2-jFu

# **TUGAS BESAR VISUALISASI DATA**

KELAS : IF-42-GAB01

ANGGOTA KELOMPOK :
1. Erix Wijaya (1301190435)
2. Laura Imanuela Mustamu (1301194027)
3. Rania Az Zahra (1301194349)

### VISUALISASI DATA INTERAKTIF

Visualisasi data untuk:
1. Kasus aktif COVID-19 pada provinsi-provinsi di Indonesia
2. Kasus kematian akibat COVID-19 pada provinsi-provinsi di Indonesia
3. Kasus kesembuhan COVID-19 pada provinsi-provinsi di Indonesia
"""

# Import Library
import pandas as pd
import datetime as dt
from bokeh.io import curdoc
from bokeh.plotting import figure
from bokeh.models import HoverTool, ColumnDataSource
from bokeh.models import CategoricalColorMapper
from bokeh.palettes import Spectral6
from bokeh.layouts import widgetbox, row, gridplot
from bokeh.models import DateRangeSlider, Select
from bokeh.models.widgets import Tabs, Panel

# Import dataset
data = pd.read_csv('data/covid_19.csv')

# Membuat dataset baru yang di grup berdasarkan tanggal dan lokasi/provinsi
cases = data[['Date', 'Total Cases', 'Province']].groupby(['Province', 'Date']).sum().reset_index()
deaths = data[['Date', 'Total Deaths', 'Province']].groupby(['Province', 'Date']).sum().reset_index()
recovered = data[['Date', 'Total Recovered', 'Province']].groupby(['Province', 'Date']).sum().reset_index()

# Sorting data
ints_cases = cases['Province'].value_counts().sort_index().index.tolist()
ints_deaths = deaths['Province'].value_counts().sort_index().index.tolist()
ints_recovered = recovered['Province'].value_counts().sort_index().index.tolist()

# Set data cases
source = ColumnDataSource(data={
    'Province'    : cases[cases['Province'] == 'DKI Jakarta']['Province'],
    'Total Cases' : cases[cases['Total Cases'] == 'DKI Jakarta']['Total Cases'],
    'Date'        : cases[cases['Date'] == 'DKI Jakarta']['Date']
})

# Set data deaths
source = ColumnDataSource(data={
    'Province'      : deaths[deaths['Province'] == 'DKI Jakarta']['Province'],
    'Total Deaths'  : deaths[deaths['Total Deaths'] == 'DKI Jakarta']['Total Deaths'],
    'Date'          : deaths[deaths['Date'] == 'DKI Jakarta']['Date']
})

# Set data recovered
source = ColumnDataSource(data={
    'Province'        : recovered[recovered['Province'] == 'DKI Jakarta']['Province'],
    'Total Recovered' : recovered[recovered['Total Recovered'] == 'DKI Jakarta']['Total Recovered'],
    'Date'            : recovered[recovered['Date'] == 'DKI Jakarta']['Date']
})

# Set kolom yang diperlukan pada visualisasi data Cases
tooltips_cases = [
            ('Province', '@Province'),
            ('Date', '@Date{%F}'),
            ('Total Cases', '@Total Cases')  
           ]

# Set kolom yang diperlukan pada visualisasi data Deaths
tooltips_deaths = [
            ('Province', '@Province'),
            ('Date', '@Date{%F}'),
            ('Total Deaths', '@Total Deaths')  
           ]

# Set kolom yang diperlukan pada visualisasi data Recovered
tooltips_recovered = [
            ('Province', '@Province'),
            ('Date', '@Date{%F}'),
            ('Total Recovered', '@Total Recovered')  
           ]

# Grafik visualisasi Cases
fig_cases = figure(x_axis_type='datetime',
             plot_height=500, plot_width=1000,
             title='Kasus Aktif COVID-19 pada Provinsi di Indonesia',
             x_axis_label='Tanggal', y_axis_label='Banyaknya Kasus')

# Grafik visualisasi Deaths
fig_deaths = figure(x_axis_type='datetime',
             plot_height=500, plot_width=1000,
             title='Kasus Kematian COVID-19 pada Provinsi di Indonesia',
             x_axis_label='Tanggal', y_axis_label='Banyaknya Kasus')

# Grafik visualisasi Recovered
fig_recovered = figure(x_axis_type='datetime',
             plot_height=500, plot_width=1000,
             title='Kasus Sembuh COVID-19 pada Provinsi di Indonesia',
             x_axis_label='Tanggal', y_axis_label='Banyaknya Kasus')

# Menambah tools untuk visualisasi interaktif
fig_cases.add_tools(HoverTool(tooltips=tooltips_cases, formatters={'@date': 'datetime'}))
fig_deaths.add_tools(HoverTool(tooltips=tooltips_deaths, formatters={'@date': 'datetime'}))
fig_recovered.add_tools(HoverTool(tooltips=tooltips_recovered, formatters={'@date': 'datetime'}))

# Set x axis dan y axis Cases
fig_cases.line('Date', 'Total Cases', 
         color='#CE1141', 
         source=source)

# Set x axis dan y axis Deaths
fig_cases.line('Date', 'Total Deaths', 
         color='#CE1141', 
         source=source)

# Set x axis dan y axis Recovered
fig_cases.line('Date', 'Total Recovered', 
         color='#CE1141', 
         source=source)

# Fungsi visualisasi Cases
def update_cases(attr, old, new):

    [start, end] = slider.value
    date_from = dt.datetime.fromtimestamp(start/1000.0).date()
    date_until = dt.datetime.fromtimestamp(end/1000.0).date()

    cases_cd = int(cases_select.value)

    # new data
    cases_date = cases[(cases['Date'] >= date_from) & (cases['Date'] <= date_until)]
    new_data = {
        'Province'    : cases[cases['Province'] == 'DKI Jakarta']['Province'],
        'Total Cases' : cases[cases['Total Cases'] == 'DKI Jakarta']['Total Cases'],
        'Date'        : cases[cases['Date'] == 'DKI Jakarta']['Date']
    }
    source.data = new_data

    fig_cases.title.text = 'Kasus Aktif di Provinsi '+cases_select.value

# Mengatur range date yang bisa diatur pada Cases
init_value = (data['Date'].min(), data['Date'].max())
slider = DateRangeSlider(start=init_value[0], end=init_value[1], value=init_value)
slider.on_change('value',update_cases)

# Mengatur provinsi yang bisa dipilih pada Cases
cases_select = Select(
    options= [str(x) for x in ints_cases],
    value= 'DKI Jakarta',
    title='Provinsi'
)
cases_select.on_change('value', update_cases)

# Fungsi visualisasi Deaths
def update_deaths(attr, old, new):

    [start, end] = slider.value
    date_from = dt.datetime.fromtimestamp(start/1000.0).date()
    date_until = dt.datetime.fromtimestamp(end/1000.0).date()

    deaths_cd = int(deaths_select.value)

    # new data
    deaths_date = deaths[(deaths['Date'] >= date_from) & (deaths['Date'] <= date_until)]
    new_data = {
        'Province'     : deaths[deaths['Province'] == 'DKI Jakarta']['Province'],
        'Total Deaths' : deaths[deaths['Total Deaths'] == 'DKI Jakarta']['Total Deaths'],
        'Date'         : deaths[deaths['Date'] == 'DKI Jakarta']['Date']
    }
    source.data = new_data

    fig_deaths.title.text = 'Kasus Kematian di Provinsi '+deaths_select.value

# Mengatur range date yang bisa diatur pada Deaths
init_value = (data['Date'].min(), data['Date'].max())
slider = DateRangeSlider(start=init_value[0], end=init_value[1], value=init_value)
slider.on_change('value',update_deaths)

# Mengatur provinsi yang bisa dipilih pada Deaths
deaths_select = Select(
    options= [str(x) for x in ints_deaths],
    value= 'DKI Jakarta',
    title='Provinsi'
)
deaths_select.on_change('value', update_deaths)

# Fungsi visualisasi Recovered
def update_recovered(attr, old, new):

    [start, end] = slider.value
    date_from = dt.datetime.fromtimestamp(start/1000.0).date()
    date_until = dt.datetime.fromtimestamp(end/1000.0).date()

    recovered_cd = int(recovered_select.value)

    # new data
    recovered_date = recovered[(recovered['Date'] >= date_from) & (recovered['Date'] <= date_until)]
    new_data = {
        'Province'     : recovered[recovered['Province'] == 'DKI Jakarta']['Province'],
        'Total Recovered' : recovered[recovered['Total Recovered'] == 'DKI Jakarta']['Total Recovered'],
        'Date'         : recovered[recovered['Date'] == 'DKI Jakarta']['Date']
    }
    source.data = new_data

    fig_recovered.title.text = 'Kasus Kematian di Provinsi '+recovered_select.value

# Mengatur range date yang bisa diatur pada Recovered
init_value = (data['Date'].min(), data['Date'].max())
slider = DateRangeSlider(start=init_value[0], end=init_value[1], value=init_value)
slider.on_change('value',update_recovered)

# Mengatur provinsi yang bisa dipilih pada Recovered
recovered_select = Select(
    options= [str(x) for x in ints_recovered],
    value= 'DKI Jakarta',
    title='Provinsi'
)
recovered_select.on_change('value', update_recovered)

# Membuat layout
layout_cases = row(widgetbox(cases_select, slider), fig_cases)
layout_deaths = row(widgetbox(deaths_select, slider), fig_deaths)
layout_recovered = row(widgetbox(recovered_select, slider), fig_recovered)

first_panel = Panel(child=layout_cases, title='Kasus Aktif COVID-19 di Indonesia')
second_panel = Panel(child=layout_deaths, title='Kasus Kematian Akibat COVID-19 di Indonesia')
third_panel = Panel(child=layout_recovered, title='Kasus Kesembuhan COVID-19 di Indonesia')

tabs = Tabs(tabs=[first_panel, second_panel, third_panel])

curdoc().add_root(tabs)
